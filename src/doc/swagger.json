{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "node-iothub"
    },
    "basePath": "/api",
    "consumes": [
        "application/json",
        "application/x-www-form-urlencoded",
        "application/xml",
        "text/xml"
    ],
    "produces": [
        "application/json",
        "application/xml",
        "text/xml",
        "application/javascript",
        "text/javascript"
    ],
    "paths": {
        "/feeds": {
            "get": {
                "tags": [
                    "AtomicFeed",
                    "ComposedFeed",
                    "ExecutableFeed",
                    "Client"
                ],
                "summary": "Fetches all registered feeds.",
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "count": {
                                    "type": "number"
                                },
                                "types": {
                                    "type": "array",
                                    "description": "The feeds types found. The values of this array indicate wich properties are available.",
                                    "items": {
                                        "type": "string",
                                        "enum": [
                                            "atomic",
                                            "composed",
                                            "executable"
                                        ]
                                    }
                                },
                                "atomic": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/AtomicFeed"
                                    }
                                },
                                "composed": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ComposedFeed"
                                    }
                                },
                                "executable": {
                                    "type": "array",
                                    "items": {
                                        "$ref": "#/definitions/ExecutableFeed"
                                    }
                                }
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/field": {
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Fetches hasOne relation field.",
                "operationId": "AtomicFeed.prototype.__get__field",
                "parameters": [
                    {
                        "name": "refresh",
                        "in": "query",
                        "required": false,
                        "type": "boolean"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Creates a new instance in field of this model.",
                "operationId": "AtomicFeed.prototype.__create__field",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Update field of this model.",
                "operationId": "AtomicFeed.prototype.__update__field",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Deletes field of this model.",
                "operationId": "AtomicFeed.prototype.__destroy__field",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic": {
            "post": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "AtomicFeed.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "AtomicFeed.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "AtomicFeed.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AtomicFeed"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/exists": {
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "AtomicFeed.exists__get_feeds_atomic_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}": {
            "head": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "AtomicFeed.exists__head_feeds_atomic_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "AtomicFeed.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "AtomicFeed.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "AtomicFeed.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/findOne": {
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "AtomicFeed.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/update": {
            "post": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "AtomicFeed.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/count": {
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "AtomicFeed.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/change-stream": {
            "post": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Create a change stream.",
                "operationId": "AtomicFeed.createChangeStream__post_feeds_atomic_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Create a change stream.",
                "operationId": "AtomicFeed.createChangeStream__get_feeds_atomic_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/data-format": {
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Get accepted data format for this feed",
                "operationId": "AtomicFeed.getDataFormat",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/data": {
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Get feed data with optional limit",
                "operationId": "AtomicFeed.getData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Post feed data",
                "operationId": "AtomicFeed.postData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/validated": {
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Check if the feed has already been validated",
                "operationId": "AtomicFeed.isValidated",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/validate": {
            "post": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Validate feed for use and create data collection",
                "operationId": "AtomicFeed.validate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/force": {
            "delete": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Force-delete a model instance by id from the data source.",
                "operationId": "AtomicFeed.forceDeleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/filtered": {
            "get": {
                "tags": [
                    "AtomicFeed",
                    "Client"
                ],
                "summary": "Find all instances of the feed matched by filter from the data source and filtered by feed ACL.",
                "operationId": "AtomicFeed.filteredFind",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AtomicFeed"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/filtered/findOne": {
            "get": {
                "tags": [
                    "AtomicFeed",
                    "Client"
                ],
                "summary": "Find first instance of the feed matched by filter from the data source and filtered by feed ACL.",
                "operationId": "AtomicFeed.filteredFindOne",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/filtered/{id}": {
            "get": {
                "tags": [
                    "AtomicFeed",
                    "Client"
                ],
                "summary": "Find a feed instance by id from the data source and filtered by feed ACL.",
                "operationId": "AtomicFeed.filteredFindById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Feed id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AtomicFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/filtered/{id}/exists": {
            "get": {
                "tags": [
                    "AtomicFeed",
                    "Client"
                ],
                "summary": "Check whether a feed instance, filtered by feed ACL, exists in the data source.",
                "operationId": "AtomicFeed.filteredExists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Feed id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/filtered/count": {
            "get": {
                "tags": [
                    "AtomicFeed",
                    "Client"
                ],
                "summary": "Count instances of the feed matched by where from the data source and filtered by feed ACL.",
                "operationId": "AtomicFeed.filteredCount",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/atomic/{id}/role-acl": {
            "post": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Associate a role ACL to this model instance.",
                "operationId": "AtomicFeed.createRoleAcl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FeedRoleACL"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "AtomicFeed"
                ],
                "summary": "Find all role ACL associated to this model instance.",
                "operationId": "AtomicFeed.getRoleAcls",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FeedRoleACL"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/fields/{fk}": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Find a related item by id for fields.",
                "operationId": "ComposedFeed.prototype.__findById__fields",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for fields",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Delete a related item by id for fields.",
                "operationId": "ComposedFeed.prototype.__destroyById__fields",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for fields",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Update a related item by id for fields.",
                "operationId": "ComposedFeed.prototype.__updateById__fields",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for fields",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/fields": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Queries fields of ComposedFeed.",
                "operationId": "ComposedFeed.prototype.__get__fields",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/Field"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Creates a new instance in fields of this model.",
                "operationId": "ComposedFeed.prototype.__create__fields",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/Field"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Deletes all fields of this model.",
                "operationId": "ComposedFeed.prototype.__delete__fields",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/fields/count": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Counts fields of ComposedFeed.",
                "operationId": "ComposedFeed.prototype.__count__fields",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed": {
            "post": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "ComposedFeed.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "ComposedFeed.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "ComposedFeed.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ComposedFeed"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/exists": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ComposedFeed.exists__get_feeds_composed_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}": {
            "head": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ComposedFeed.exists__head_feeds_composed_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "ComposedFeed.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "ComposedFeed.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "ComposedFeed.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/findOne": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "ComposedFeed.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/update": {
            "post": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "ComposedFeed.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/count": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "ComposedFeed.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/change-stream": {
            "post": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Create a change stream.",
                "operationId": "ComposedFeed.createChangeStream__post_feeds_composed_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Create a change stream.",
                "operationId": "ComposedFeed.createChangeStream__get_feeds_composed_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/data-format": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Get accepted data format for this feed",
                "operationId": "ComposedFeed.getDataFormat",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/data": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Get feed data with optional limit",
                "operationId": "ComposedFeed.getData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "object"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Post feed data",
                "operationId": "ComposedFeed.postData",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/validated": {
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Check if the feed has already been validated",
                "operationId": "ComposedFeed.isValidated",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/validate": {
            "post": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Validate feed for use and create data collection",
                "operationId": "ComposedFeed.validate",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/force": {
            "delete": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Force-delete a model instance by id from the data source.",
                "operationId": "ComposedFeed.forceDeleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/filtered": {
            "get": {
                "tags": [
                    "ComposedFeed",
                    "Client"
                ],
                "summary": "Find all instances of the feed matched by filter from the data source and filtered by feed ACL.",
                "operationId": "ComposedFeed.filteredFind",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ComposedFeed"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/filtered/findOne": {
            "get": {
                "tags": [
                    "ComposedFeed",
                    "Client"
                ],
                "summary": "Find first instance of the feed matched by filter from the data source and filtered by feed ACL.",
                "operationId": "ComposedFeed.filteredFindOne",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/filtered/{id}": {
            "get": {
                "tags": [
                    "ComposedFeed",
                    "Client"
                ],
                "summary": "Find a feed instance by id from the data source and filtered by feed ACL.",
                "operationId": "ComposedFeed.filteredFindById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Feed id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ComposedFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/filtered/{id}/exists": {
            "get": {
                "tags": [
                    "ComposedFeed",
                    "Client"
                ],
                "summary": "Check whether a feed instance, filtered by feed ACL, exists in the data source.",
                "operationId": "ComposedFeed.filteredExists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Feed id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/filtered/count": {
            "get": {
                "tags": [
                    "ComposedFeed",
                    "Client"
                ],
                "summary": "Count instances of the feed matched by where from the data source and filtered by feed ACL.",
                "operationId": "ComposedFeed.filteredCount",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/composed/{id}/role-acl": {
            "post": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Associate a role ACL to this model instance.",
                "operationId": "ComposedFeed.createRoleAcl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FeedRoleACL"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ComposedFeed"
                ],
                "summary": "Find all role ACL associated to this model instance.",
                "operationId": "ComposedFeed.getRoleAcls",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FeedRoleACL"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable": {
            "post": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "ExecutableFeed.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "ExecutableFeed.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "ExecutableFeed.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExecutableFeed"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/{id}/exists": {
            "get": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ExecutableFeed.exists__get_feeds_executable_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/{id}": {
            "head": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "ExecutableFeed.exists__head_feeds_executable_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "ExecutableFeed.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "ExecutableFeed.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "ExecutableFeed.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "PersistedModel id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/findOne": {
            "get": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "ExecutableFeed.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/update": {
            "post": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "ExecutableFeed.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/count": {
            "get": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "ExecutableFeed.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/change-stream": {
            "post": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Create a change stream.",
                "operationId": "ExecutableFeed.createChangeStream__post_feeds_executable_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Create a change stream.",
                "operationId": "ExecutableFeed.createChangeStream__get_feeds_executable_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/filtered": {
            "get": {
                "tags": [
                    "ExecutableFeed",
                    "Client"
                ],
                "summary": "Find all instances of the feed matched by filter from the data source and filtered by feed ACL.",
                "operationId": "ExecutableFeed.filteredFind",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/ExecutableFeed"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/filtered/findOne": {
            "get": {
                "tags": [
                    "ExecutableFeed",
                    "Client"
                ],
                "summary": "Find first instance of the feed matched by filter from the data source and filtered by feed ACL.",
                "operationId": "ExecutableFeed.filteredFindOne",
                "parameters": [
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/filtered/{id}": {
            "get": {
                "tags": [
                    "ExecutableFeed",
                    "Client"
                ],
                "summary": "Find a feed instance by id from the data source and filtered by feed ACL.",
                "operationId": "ExecutableFeed.filteredFindById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Feed id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "query",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/ExecutableFeed"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/filtered/{id}/exists": {
            "get": {
                "tags": [
                    "ExecutableFeed",
                    "Client"
                ],
                "summary": "Check whether a feed instance, filtered by feed ACL, exists in the data source.",
                "operationId": "ExecutableFeed.filteredExists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Feed id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/filtered/count": {
            "get": {
                "tags": [
                    "ExecutableFeed",
                    "Client"
                ],
                "summary": "Count instances of the feed matched by where from the data source and filtered by feed ACL.",
                "operationId": "ExecutableFeed.filteredCount",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/feeds/executable/{id}/role-acl": {
            "post": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Associate a role ACL to this model instance.",
                "operationId": "ExecutableFeed.createRoleAcl",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "body",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/FeedRoleACL"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "ExecutableFeed"
                ],
                "summary": "Find all role ACL associated to this model instance.",
                "operationId": "ExecutableFeed.getRoleAcls",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/FeedRoleACL"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/{id}/principals/{fk}": {
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Find a related item by id for principals.",
                "operationId": "HubRole.prototype.__findById__principals",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for principals",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Delete a related item by id for principals.",
                "operationId": "HubRole.prototype.__destroyById__principals",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for principals",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Update a related item by id for principals.",
                "operationId": "HubRole.prototype.__updateById__principals",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for principals",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/{id}/principals": {
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Queries principals of HubRole.",
                "operationId": "HubRole.prototype.__get__principals",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/RoleMapping"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Creates a new instance in principals of this model.",
                "operationId": "HubRole.prototype.__create__principals",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/RoleMapping"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Deletes all principals of this model.",
                "operationId": "HubRole.prototype.__delete__principals",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/roles/{id}/principals/count": {
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Counts principals of HubRole.",
                "operationId": "HubRole.prototype.__count__principals",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles": {
            "post": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "HubRole.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "HubRole.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "HubRole.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HubRole"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/{id}/exists": {
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "HubRole.exists__get_roles_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/{id}": {
            "head": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "HubRole.exists__head_roles_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "HubRole.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "HubRole.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "HubRole.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Role id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/findOne": {
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "HubRole.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/update": {
            "post": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "HubRole.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/count": {
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "HubRole.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/roles/change-stream": {
            "post": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Create a change stream.",
                "operationId": "HubRole.createChangeStream__post_roles_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "HubRole"
                ],
                "summary": "Create a change stream.",
                "operationId": "HubRole.createChangeStream__get_roles_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/accessTokens/{fk}": {
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Find a related item by id for accessTokens.",
                "operationId": "HubUser.prototype.__findById__accessTokens",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Delete a related item by id for accessTokens.",
                "operationId": "HubUser.prototype.__destroyById__accessTokens",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Update a related item by id for accessTokens.",
                "operationId": "HubUser.prototype.__updateById__accessTokens",
                "parameters": [
                    {
                        "name": "fk",
                        "in": "path",
                        "description": "Foreign key for accessTokens",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/accessTokens": {
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Queries accessTokens of HubUser.",
                "operationId": "HubUser.prototype.__get__accessTokens",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/AccessToken"
                            }
                        }
                    }
                },
                "deprecated": false
            },
            "post": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Creates a new instance in accessTokens of this model.",
                "operationId": "HubUser.prototype.__create__accessTokens",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/AccessToken"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Deletes all accessTokens of this model.",
                "operationId": "HubUser.prototype.__delete__accessTokens",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/accessTokens/count": {
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Counts accessTokens of HubUser.",
                "operationId": "HubUser.prototype.__count__accessTokens",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users": {
            "post": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Create a new instance of the model and persist it into the data source.",
                "operationId": "HubUser.create",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Update an existing model instance or insert a new one into the data source.",
                "operationId": "HubUser.upsert",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "Model instance data",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Find all instances of the model matched by filter from the data source.",
                "operationId": "HubUser.find",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/HubUser"
                            }
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}/exists": {
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "HubUser.exists__get_users_{id}_exists",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/{id}": {
            "head": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Check whether a model instance exists in the data source.",
                "operationId": "HubUser.exists__head_users_{id}",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Find a model instance by id from the data source.",
                "operationId": "HubUser.findById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields and include",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                },
                "deprecated": false
            },
            "delete": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Delete a model instance by id from the data source.",
                "operationId": "HubUser.deleteById",
                "parameters": [
                    {
                        "name": "id",
                        "in": "path",
                        "description": "Model id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "put": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Update attributes for a model instance and persist it into the data source.",
                "operationId": "HubUser.prototype.updateAttributes",
                "parameters": [
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    },
                    {
                        "name": "id",
                        "in": "path",
                        "description": "User id",
                        "required": true,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/findOne": {
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Find first instance of the model matched by filter from the data source.",
                "operationId": "HubUser.findOne",
                "parameters": [
                    {
                        "name": "filter",
                        "in": "query",
                        "description": "Filter defining fields, where, include, order, offset, and limit",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/update": {
            "post": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Update instances of the model matched by where from the data source.",
                "operationId": "HubUser.updateAll",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    },
                    {
                        "name": "data",
                        "in": "body",
                        "description": "An object of model property name/value pairs",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/HubUser"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The number of instances updated",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/count": {
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Count instances of the model matched by where from the data source.",
                "operationId": "HubUser.count",
                "parameters": [
                    {
                        "name": "where",
                        "in": "query",
                        "description": "Criteria to match model instances",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/change-stream": {
            "post": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "HubUser.createChangeStream__post_users_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "formData",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            },
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Create a change stream.",
                "operationId": "HubUser.createChangeStream__get_users_change-stream",
                "parameters": [
                    {
                        "name": "options",
                        "in": "query",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/login": {
            "post": {
                "tags": [
                    "HubUser",
                    "Client"
                ],
                "summary": "Login a user with username/email and password.",
                "operationId": "HubUser.login",
                "parameters": [
                    {
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    },
                    {
                        "name": "include",
                        "in": "query",
                        "description": "Related objects to include in the response. See the description of return value for more details.",
                        "required": false,
                        "type": "string",
                        "format": "JSON"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Request was successful",
                        "schema": {
                            "description": "The response body contains properties of the AccessToken created on login.\nDepending on the value of `include` parameter, the body may contain additional properties:\n\n\n\n  - `user` - `{User}` - Data of the currently logged in user.\n(`include=user`)\n\n",
                            "type": "object"
                        }
                    }
                },
                "deprecated": false
            }
        },
        "/users/logout": {
            "post": {
                "tags": [
                    "HubUser",
                    "Client"
                ],
                "summary": "Logout a user with access token.",
                "operationId": "HubUser.logout",
                "parameters": [],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/users/confirm": {
            "get": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Confirm a user registration with email verification token.",
                "operationId": "HubUser.confirm",
                "parameters": [
                    {
                        "name": "uid",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "token",
                        "in": "query",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "redirect",
                        "in": "query",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        },
        "/users/reset": {
            "post": {
                "tags": [
                    "HubUser"
                ],
                "summary": "Reset password for a user with email.",
                "operationId": "HubUser.resetPassword",
                "parameters": [
                    {
                        "name": "options",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Request was successful"
                    }
                },
                "deprecated": false
            }
        }
    },
    "definitions": {
        "Field": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                },
                "required": {
                    "default": false,
                    "type": "boolean"
                },
                "metadata": {
                    "default": "",
                    "type": "string"
                },
                "keywords": {
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "id": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "name",
                "type"
            ],
            "additionalProperties": false
        },
        "AtomicFeed": {
            "properties": {
                "id": {
                    "type": "number",
                    "format": "double"
                },
                "_field": {
                    "$ref": "#/definitions/Field"
                },
                "name": {
                    "type": "string"
                },
                "metadata": {
                    "default": "",
                    "type": "string"
                },
                "keywords": {
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "FeedRoleACL": {
            "properties": {
                "id": {
                    "type": "number",
                    "format": "double"
                },
                "roleId": {
                    "type": "number",
                    "format": "double"
                },
                "atomicId": {
                    "type": "number",
                    "format": "double"
                },
                "composedId": {
                    "type": "number",
                    "format": "double"
                },
                "executableId": {
                    "type": "number",
                    "format": "double"
                }
            },
            "additionalProperties": false
        },
        "ComposedFeed": {
            "properties": {
                "storage": {
                    "default": false,
                    "type": "boolean"
                },
                "readable": {
                    "default": false,
                    "type": "boolean"
                },
                "writeable": {
                    "default": false,
                    "type": "boolean"
                },
                "id": {
                    "type": "number",
                    "format": "double"
                },
                "_fields": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Field"
                    }
                },
                "name": {
                    "type": "string"
                },
                "metadata": {
                    "default": "",
                    "type": "string"
                },
                "keywords": {
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "ExecutableFeed": {
            "properties": {
                "source": {
                    "default": "",
                    "type": "string"
                },
                "params": {
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "readable": {
                    "default": false,
                    "type": "boolean"
                },
                "writeable": {
                    "default": false,
                    "type": "boolean"
                },
                "id": {
                    "type": "number",
                    "format": "double"
                },
                "name": {
                    "type": "string"
                },
                "metadata": {
                    "default": "",
                    "type": "string"
                },
                "keywords": {
                    "default": [],
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "RoleMapping": {
            "description": "Map principals to roles",
            "properties": {
                "id": {
                    "type": "number",
                    "format": "double"
                },
                "principalType": {
                    "description": "The principal type, such as user, application, or role",
                    "type": "string"
                },
                "principalId": {
                    "type": "string"
                },
                "roleId": {
                    "type": "number",
                    "format": "double"
                }
            },
            "additionalProperties": false
        },
        "HubRole": {
            "properties": {
                "id": {
                    "type": "number",
                    "format": "double"
                },
                "name": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date"
                },
                "modified": {
                    "type": "string",
                    "format": "date"
                }
            },
            "required": [
                "name"
            ],
            "additionalProperties": false
        },
        "AccessToken": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "ttl": {
                    "default": 1209600,
                    "description": "time to live in seconds (2 weeks by default)",
                    "type": "number",
                    "format": "double"
                },
                "created": {
                    "type": "string",
                    "format": "date"
                },
                "userId": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "id"
            ],
            "additionalProperties": false
        },
        "HubUser": {
            "properties": {
                "realm": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                },
                "credentials": {
                    "type": "object"
                },
                "challenges": {
                    "type": "object"
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "verificationToken": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "created": {
                    "type": "string",
                    "format": "date"
                },
                "lastUpdated": {
                    "type": "string",
                    "format": "date"
                },
                "id": {
                    "type": "number",
                    "format": "double"
                }
            },
            "required": [
                "email"
            ],
            "additionalProperties": false
        }
    },
    "tags": [
        {
            "name": "AtomicFeed"
        },
        {
            "name": "ComposedFeed"
        },
        {
            "name": "ExecutableFeed"
        },
        {
            "name": "HubRole"
        },
        {
            "name": "HubUser"
        },
        {
            "name": "Client"
        }
    ]
}